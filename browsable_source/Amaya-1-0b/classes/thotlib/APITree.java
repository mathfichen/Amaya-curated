/*
 * DO NOT EDIT
 * Generated by the following command from /users/veillard/opera/javalib directory
 * ../LINUX-ELF/bin/javastub -T JavaTypes.def -M thotlib_APITree -J ../classes/thotlib/APITree.java ../thotlib/include/tree.h 
 */
package thotlib;


/*
 * Java public native definitions for class thotlib_APITree
 */

public class APITree {
 public static final int SearchForward = 0;
 public static final int SearchInTree = 1;
 public static final int SearchBackward = 2;

 public static final int ReadWrite = 0;
 public static final int ReadOnly = 1;
 public static final int Hidden = 2;
 public static final int Inherited = 3;

 public static final int ConstructIdentity = 0;
 public static final int ConstructList = 1;
 public static final int ConstructChoice = 2;
 public static final int ConstructOrderedAggregate = 3;
 public static final int ConstructUnorderedAggregate = 4;
 public static final int ConstructConstant = 5;
 public static final int ConstructReference = 6;
 public static final int ConstructBasicType = 7;
 public static final int ConstructNature = 8;
 public static final int ConstructPair = 9;
 public static final int ConstructError = 10;



/* ----------------------------------------------------------------------
   ChangeElementType
 
   Change the type of a given element.
   CAUTION: THIS FUNCTION SHOULD BE USED VERY CARFULLY!
 
   Parameters:
   element: the concerned element
   typeNum: new type for the element
 
   ---------------------------------------------------------------------- */
 public static native void ChangeElementType(long element, int typeNum);


/* ----------------------------------------------------------------------
   TtaNewElement

   Creates a new element of a given type.

   Parameters:
   document: the document for which the element is created.
   elementType: type of the element to be created.

   Return value:
   the created element.

   ---------------------------------------------------------------------- */
 public static native long TtaNewElement(int document, long elementType);


/* ----------------------------------------------------------------------
   TtaNewTree

   Creates a new element of a given type and all its descendants, according
   to the structure schema.

   Parameters:
   document: the document for which the tree is created.
   elementType: type of the root element of the tree to be created.
   label: label of the root element to be created. Empty string if the value
   of the label is undefined.

   Return value:
   the root element of the created tree.

   ---------------------------------------------------------------------- */
 public static native long TtaNewTree(int document, long elementType, String label);


/* ----------------------------------------------------------------------
   TtaCopyTree

   Creates a copy of a tree.

   Parameters:
   sourceElement: element to be copied.
   sourceDocument: the document containing the element to be copied.
   destinationDocument: the document for which the copy must be created.
   parent: element that will become the parent of the created tree.

   Return value:
   the root element of the created tree.

   ---------------------------------------------------------------------- */
 public static native long TtaCopyTree(long sourceElement, int sourceDocument, int destinationDocument, long parent);


/* ----------------------------------------------------------------------
   TtaCreateDescent

   Creates a new element of a given type and inserts it in the tree as a
   descendant of a given element. All elements of the descent required by the
   structure schema are also created.

   Parameters:
   document: the document for which the tree is created.
   element: the element for which a descent will be created.
   elementType: type of the element to be created as the last descendant.

   Return value:
   the last descendant created or NULL if the element cannot be created.
   This element is empty.

   ---------------------------------------------------------------------- */
 public static native long TtaCreateDescent(int document, long element, long elementType);


/* ----------------------------------------------------------------------
   TtaCreateDescentWithContent

   Creates a new element of a given type and inserts it in the tree as a
   descendant of a given element. All elements of the descent required by the
   structure schema are created, as well as the content of the requested element.

   Parameters:
   document: the document for which the tree is created.
   element: the element for which a descent will be created.
   elementType: type of the element to be created as the last descendant.

   Return value:
   the last descendant created or NULL if the element cannot be created.
   If not NULL, the minimum content of that element has been created.

   ---------------------------------------------------------------------- */
 public static native long TtaCreateDescentWithContent(int document, long element, long elementType);


/* ----------------------------------------------------------------------
   TtaDeleteTree

   Deletes a tree (or a single element) and frees it.
   All references that points at any element of that tree are
   cancelled.
   The deleted element must not be used later.

   Parameters:
   element: the element (or root of the tree) to be deleted.
   document: the document containing the element to be deleted.

   ---------------------------------------------------------------------- */
 public static native void TtaDeleteTree(long element, int document);


/* ----------------------------------------------------------------------
   TtaAttachNewTree

   Attaches an entire tree (main tree or associated tree) to a document.

   Parameter:
   tree: root of the tree to be attached. This tree
   must be a valid main tree or associated tree according to the
   document structure schema.
   document: the document to which the tree is to be attached.

   ---------------------------------------------------------------------- */
 public static native void TtaAttachNewTree(long tree, int document);


/* ----------------------------------------------------------------------
   TtaInsertSibling

   Inserts an element in a tree, as an immediate sibling of a given element.
   The element to be inserted must not yet be part of a document.

   Parameters:
   newElement: the element (or root of the tree) to be inserted.
   sibling: an element belonging to a tree. This element
   must not be the root of a tree.
   before: if TRUE, inserts newElement as previous sibling of sibling,
   if FALSE, inserts newElement as next sibling of sibling.
   document: the document to which both elements belong.

   ---------------------------------------------------------------------- */
 public static native void TtaInsertSibling(long newElement, long sibling, boolean before, int document);


/* ----------------------------------------------------------------------
   TtaInsertFirstChild

   Inserts an element in a tree, as the first child of a given element.
   The element to be inserted must not yet be part of a document.
   This function can also be used for attaching an option to a choice.

   Parameters:
   newElement: the element (or root of the tree) to be inserted.
   parent: an element belonging to a tree.
   document: the document to which both elements belong.

   Return parameter:
   If newElement is an option that replaces the choice, newElement takes
   the value of parent.
   ---------------------------------------------------------------------- */
 public static native void TtaInsertFirstChild(/*INOUT*/ Element newElement, long parent, int document);


/* ----------------------------------------------------------------------
   TtaCreateElement

   Create an element of a given type and insert it at the current position within
   a given document. The current position is defined by the current selection.
   If the current position is a single position (insertion point) the new element
   is simply inserted at that position. If one or several characters and/or
   elements are selected, the new element is created at that position and the
   selected characters/elements become the content of the new element, provided
   the  structure schema allows it.

   Parameters:
   elementType: type of the element to be created.
   document: the document for which the element is created.

   ---------------------------------------------------------------------- */
 public static native void TtaCreateElement(long elementType, int document);


/* ----------------------------------------------------------------------
   TtaInsertElement

   Create an element of a given type and insert it at the current position within
   a given document. The current position is defined by the current selection.
   If the current position is a single position (insertion point) the new element
   is simply inserted at that position. If one or several characters and/or
   elements are selected, the new element is created before the first selected
   character/element and the selected characters/elements are not changed.

   Parameters:
   elementType: type of the element to be created.
   document: the document for which the element is created.

   ---------------------------------------------------------------------- */
 public static native void TtaInsertElement(long elementType, int document);


/* ----------------------------------------------------------------------
   TtaRemoveTree

   Removes a tree (or a single element) from its tree, without freeing it.

   Parameters:
   element: the element (or root of the tree) to be removed.
   document: the document containing the element to be removed.

   ---------------------------------------------------------------------- */
 public static native void TtaRemoveTree(long element, int document);


/* ----------------------------------------------------------------------
   TtaSetAccessRight

   Sets the access rights for a given element.  Access rights apply only during
   the current editing session; they are not saved with the document. They must
   be set each time the document is loaded.

   Parameters:
   element: the element.
   right: access right for that element (ReadOnly, ReadWrite, Hidden).
   document: the document to which the element belongs.

   ---------------------------------------------------------------------- */
 public static native void TtaSetAccessRight(long element, int right, int document);


/* ----------------------------------------------------------------------
   TtaHolophrastElement

   Changes the holophrasting status of a given element.

   Parameters:
   element: the element.
   holophrast: TRUE: the element gets holophrasted if it is not,
   FALSE: if the element is holphrasted, it gets expanded.
   document: the document to which the element belongs.

   ---------------------------------------------------------------------- */
 public static native void TtaHolophrastElement(long element, boolean holophrast, int document);


/* ----------------------------------------------------------------------
   TtaSetStructureChecking

   Activate or disable structure checking. When structure checking is
   activated, modifications of the abstract tree are refused if they
   lead to an invalid structure with respect to the structure schema.
   By default, checking is activated.

   Parameter:
   on: 0 disables structure checking. All other values activates
   structure checking.
   document: the document for which structure checking is changed.

   ---------------------------------------------------------------------- */
 public static native void TtaSetStructureChecking(boolean on, int document);


/* ----------------------------------------------------------------------
   TtaGetStructureChecking

   Return the current structure checking mode for a given document.
   When structure checking is activated, modifications of the abstract tree
   are refused if they lead to an invalid structure with respect to the
   structure schema. By default, checking is activated.

   Parameter:
   document: the document for which structure checking is asked.

   ---------------------------------------------------------------------- */
 public static native int TtaGetStructureChecking(int document);


/* ----------------------------------------------------------------------
   TtaSetCheckingMode

   Changes checking mode.

   Parameter:
   strict: if TRUE, the presence of all mandatory elements is checked.

   ---------------------------------------------------------------------- */
 public static native void TtaSetCheckingMode(boolean strict);


/* ----------------------------------------------------------------------
   TtaGetMainRoot

   Returns the root element of the main abstract tree representing a document.

   Parameter:
   document: the document.

   Return value:
   the root element of the main abstract tree.

   ---------------------------------------------------------------------- */
 public static native long TtaGetMainRoot(int document);


/* ----------------------------------------------------------------------
   TtaNextAssociatedRoot

   Returns the root element of the associated tree that follows the
   tree to which a given element belongs.

   Parameters:
   document: the document.
   root: the element for which the next associated tree is searched.
   That element does not need to be the root of a tree.
   If root is NULL or if root is an element in the main tree, the
   root of the first associated tree is returned.

   Return parameter:
   root: the root element of the next associated tree.
   NULL if there is no next associated tree for the document.

   ---------------------------------------------------------------------- */
 public static native void TtaNextAssociatedRoot(int document, /*INOUT*/ Element root);


/* ----------------------------------------------------------------------
   TtaGetFirstChild

   Returns the first child element of a given element.

   Parameter:
   parent: the element for which the first child element is asked.

   Return value:
   the first child element of parent; NULL if parent has no child.

   ---------------------------------------------------------------------- */
 public static native long TtaGetFirstChild(long parent);


/* ----------------------------------------------------------------------
   TtaGetLastChild

   Returns the last child element of a given element.

   Parameter:
   parent: the element for which the last child element is asked.

   Return value:
   the last child element of parent; NULL if parent has no child.

   ---------------------------------------------------------------------- */
 public static native long TtaGetLastChild(long parent);


/* ----------------------------------------------------------------------
   TtaPreviousSibling

   Returns the previous sibling element of a given element.

   Parameter:
   element: the element whose previous sibling is asked.

   Return parameter:
   element: the previous sibling element, or NULL if there is no
   previous sibling.

   ---------------------------------------------------------------------- */
 public static native void TtaPreviousSibling(/*INOUT*/ Element element);


/* ----------------------------------------------------------------------
   TtaNextSibling

   Returns the next sibling element of a given element.

   Parameter:
   element: the element whose next sibling is asked.

   Return parameter:
   element: the next sibling element, or NULL if there is no next sibling.

   ---------------------------------------------------------------------- */
 public static native void TtaNextSibling(/*INOUT*/ Element element);


/* ----------------------------------------------------------------------
   TtaGetSuccessor

   Returns the element that follows a given element at the same level or
   at the first upper level where there is a following element.

   Parameter:
   element: the element whose successor is asked.

   Return value:
   the successor, or NULL if there is no successor.

   ---------------------------------------------------------------------- */
 public static native long TtaGetSuccessor(long element);


/* ----------------------------------------------------------------------
   TtaGetPredecessor

   Returns the element that precedes a given element at the same level or
   at the first upper level where there is a preceding element.

   Parameter:
   element: the element whose predecessor is asked.

   Return value:
   the predecessor, or NULL if there is no predecessor.

   ---------------------------------------------------------------------- */
 public static native long TtaGetPredecessor(long element);


/* ----------------------------------------------------------------------
   TtaGetParent

   Returns the parent element (i.e. first ancestor) of a given element.

   Parameter:
   element: the element whose the parent is asked.

   Return value:
   the parent element, or NULL if there is no parent (root).

   ---------------------------------------------------------------------- */
 public static native long TtaGetParent(long element);


/* ----------------------------------------------------------------------
   TtaGetCommonAncestor

   Returns the common ancestor element of two given elements.

   Parameters:
   element1: the first element whose ancestor is asked.
   element2: the second element whose ancestor is asked.

   Return value:
   the common ancestor, or NULL if there is no
   common ancestor.

   ---------------------------------------------------------------------- */
 public static native long TtaGetCommonAncestor(long element1, long element2);


/* ----------------------------------------------------------------------
   TtaGetTypedAncestor

   Returns the first ancestor of a given type for a given element.

   Parameters:
   element: the element whose ancestor is asked.
   ancestorType: type of the asked ancestor.

   Return value:
   the ancestor, or NULL if there is no ancestor of that type.

   ---------------------------------------------------------------------- */
 public static native long TtaGetTypedAncestor(long element, long ancestorType);


/* ----------------------------------------------------------------------
   TtaGetElementType

   Returns the type of a given element.

   Parameter:
   element: the element.

   Return value:
   type of the element.

   ---------------------------------------------------------------------- */
 public static native long TtaGetElementType(long element);


/* ----------------------------------------------------------------------
   TtaIsExtensionElement

   Returns true is the element is from an extension schema

   Parameter:
   element: the element.

   Return value:
   true or false.

   ---------------------------------------------------------------------- */
 public static native boolean TtaIsExtensionElement(long element);


/* ----------------------------------------------------------------------
   TtaGetElementTypeName

   Returns the name of an element type.

   Parameter:
   elementType: element type.

   Return value:
   name of that type.

   ---------------------------------------------------------------------- */
 public static native String TtaGetElementTypeName(long elementType);


/* ----------------------------------------------------------------------
   TtaGiveTypeFromName

   Gives an element type whose name is known (the structure schema that
   defines that type must be loaded). That type is searched in a given
   structure schema (elementType.ElSSchema) and in all structure schemas
   that are extensions of that structure schema or natures used in that
   structure schema.

   Parameters:
   elementType.ElSSchema: the structure schema of interest.
   name: the name of the type of interest.

   Return parameter:
   elementType: the type having this name, or elementType.ElTypeNum = 0
   if the type is not found.

   ---------------------------------------------------------------------- */
 public static native void TtaGiveTypeFromName(/*OUT*/ ElementType elementType, String name);


/* ----------------------------------------------------------------------
   TtaSameTypes

   Compares two element types.

   Parameters:
   type1: first element type.
   type2: second element type.

   Return value:
   0 if both types are different, 1 if they are identical.

   ---------------------------------------------------------------------- */
 public static native int TtaSameTypes(long type1, long type2);


/* ----------------------------------------------------------------------
   TtaGetElementLabel

   Returns the label of a given element.

   Parameter:
   element: the element.

   Return value:
   label of the element.

   ---------------------------------------------------------------------- */
 public static native String TtaGetElementLabel(long element);


/* ----------------------------------------------------------------------
   TtaGetElementVolume

   Returns the volume of a given element, i.e. the number of characters
   contained in that element.

   Parameter:
   element: the element.

   Return value:
   element volume.

   ---------------------------------------------------------------------- */
 public static native int TtaGetElementVolume(long element);


/* ----------------------------------------------------------------------
   TtaIsConstant

   Indicates whether an element type is a constant.

   Parameter:
   elementType: type to be tested.

   Return value:
   1 = the type is a constant, 0 = the type is not a constant.

   ---------------------------------------------------------------------- */
 public static native int TtaIsConstant(long elementType);


/* ----------------------------------------------------------------------
   TtaIsLeaf

   Indicates whether an element type is a leaf.

   Parameter:
   elementType: type to be tested.

   Return value:
   1 if the type is a leaf, 0 if the type is not a leaf.

   ---------------------------------------------------------------------- */
 public static native int TtaIsLeaf(long elementType);


/* ----------------------------------------------------------------------
   TtaGetCardinalOfType

   Returns the cardinal of an element type, e.g. the number of types
   that participates in its definition in the structure schema.

   Parameter:
   elementType: the element type of interest.

   Return value:
   the cardinal of that element type (integer value).

   ---------------------------------------------------------------------- */
 public static native int TtaGetCardinalOfType(long elementType);


/* ----------------------------------------------------------------------
   TtaGetRankInAggregate

   Returns the rank that an element of type componentType should have in an
   aggregate of type aggregateType, according to the structure schema.

   Parameter:
   componentType: type of the element whose rank is asked.
   elementType: type of the aggregate.

   Return value:
   rank of the component (first component = 1), or 0 if no element of type
   componentType is allowed in the aggregate or if aggregateType is not
   an aggregate.

   ---------------------------------------------------------------------- */
 public static native int TtaGetRankInAggregate(long componentType, long aggregateType);


/* ----------------------------------------------------------------------
   TtaIsOptionalInAggregate

   Returns TRUE if component of rank rank is declared optionnal in 
   the aggregate of type elementType, according to the structure schema.

   Parameter:
   rank: the rank in the agreggate declaration of the component to be tested.
   elementType: type of the aggregate.

   Return value:
   TRUE if this component is optional.

   ---------------------------------------------------------------------- */
 public static native boolean TtaIsOptionalInAggregate(int rank, long elementType);


/* ----------------------------------------------------------------------
   TtaGetAccessRight

   Returns the access rights for a given element.

   Parameter:
   element: the element.

   Return Value:
   access right for that element (ReadOnly, ReadWrite, Hidden, Inherited).


   ---------------------------------------------------------------------- */
 public static native int TtaGetAccessRight(long element);


/* ----------------------------------------------------------------------
   TtaIsHolophrasted

   Tests whether a given element is holphrasted or not.

   Parameter:
   element: the element to be tested.

   Return Value:
   1 if the element is holphrasted, 0 if not.

   ---------------------------------------------------------------------- */
 public static native int TtaIsHolophrasted(long element);


/* ----------------------------------------------------------------------
   TtaIsReadOnly

   Tests whether a given element is protected against user modifications (ReadOnly).

   Parameter:
   element: the element to be tested.

   Return Value:
   1 if the element is protected, 0 if not.

   ---------------------------------------------------------------------- */
 public static native int TtaIsReadOnly(long element);


/* ----------------------------------------------------------------------
   TtaIsHidden

   Tests whether a given element is hidden to the user.

   Parameter:
   element: the element to be tested.

   Return Value:
   1 if the element is hidden, 0 if not.

   ---------------------------------------------------------------------- */
 public static native int TtaIsHidden(long element);


/* ----------------------------------------------------------------------
   TtaIsInAnInclusion

   Tests whether a given element is (in) an included element. An included element
   is a "live" copy of another element.

   Parameter:
   element: the element to be tested.

   Return Value:
   1 if the element is included, 0 if not.

   ---------------------------------------------------------------------- */
 public static native int TtaIsInAnInclusion(long element);


/* ----------------------------------------------------------------------
   TtaIsAncestor

   Tests if an element is an ancestor of another element.

   Parameters:
   element: an element.
   ancestor: the supposed ancestor of element.

   Return value:
   1 if ancestor in an ancestor of element, 0 if not.

   ---------------------------------------------------------------------- */
 public static native int TtaIsAncestor(long element, long ancestor);


/* ----------------------------------------------------------------------
   TtaIsBefore

   Tests if an element precedes another element in the preorder traversal
   of the tree.

   Parameters:
   element1: the first element.
   element2: the second element.

   Return value:
   1 if the first element precedes the second element, 0 if not.

   ---------------------------------------------------------------------- */
 public static native int TtaIsBefore(long element1, long element2);


/* ----------------------------------------------------------------------
   TtaIsFirstPairedElement

   Indicates if a given paired element is the first or the second of the pair.

   Parameter:
   element: the paired element.

   Return value:
   1 if it is the first element of the pair, 0 if it is the second.

   ---------------------------------------------------------------------- */
 public static native int TtaIsFirstPairedElement(long element);


/* ----------------------------------------------------------------------
   TtaCanInsertSibling

   Checks whether an element of a given type can be inserted in an
   abstract tree as an immediate sibling of an existing element.

   Parameters:
   elementType: element type to be checked.
   sibling: an existing element which is part of an abstract tree.
   before: if TRUE, checks if insertion is allowed before element "sibling".
   If FALSE, checks if insertion is allowed after element "sibling".
   document: the document to which element "sibling" belongs.

   Return value:
   TRUE if that element type can be inserted, FALSE if the structure
   schema does not allow that insertion.

   ---------------------------------------------------------------------- */
 public static native boolean TtaCanInsertSibling(long elementType, long sibling, boolean before, int document);


/* ----------------------------------------------------------------------
   TtaCanInsertFirstChild

   Checks whether an element of a given type can be inserted in an
   abstract tree as the first child of an existing element (parent).

   Parameters:
   elementType: element type to be checked.
   parent: an existing element which is part of an abstract tree.
   document: the document to which element parent belongs.

   Return value:
   TRUE if that element type can be inserted, FALSE if the structure
   schema does not allow that insertion.

   ---------------------------------------------------------------------- */
 public static native boolean TtaCanInsertFirstChild(long elementType, long parent, int document);


/* ----------------------------------------------------------------------
   TtaGetDocument

   Returns the document containing a given element

   Parameters:
   element: the element for which document is asked.

   Return value:
   the document containing that element or 0 if the element does not
   belong to any document.

   ---------------------------------------------------------------------- */
 public static native int TtaGetDocument(long element);


/* ----------------------------------------------------------------------
   TtaNextCopiedElement

   Returns one of the elements that have been copied into the ``clipboard''
   by the last Copy or Cut command. (This function is available only in the
   ThotEditor library).

   Parameter:
   element: NULL if the first element of the clipboard is asked;
   an element of the clipboard if the next one is asked.

   Return parameter:
   element: the asked element if it exists, or NULL if there is no next
   element in the clipboard or if the clipboard is empty.

   ---------------------------------------------------------------------- */
 public static native void TtaNextCopiedElement(/*OUT*/ Element element);


/* ----------------------------------------------------------------------
   TtaGetCopiedDocument

   Returns the document from which the current content of the clipboard
   has been copied or cut. (This function is available only in the ThotEditor
   library).

   Parameters:
   No parameter.

   Return value:
   the document from which the current content of the clipboard has been
   copied or cut; 0 if the clipboard is empty.

   ---------------------------------------------------------------------- */
 public static native int TtaGetCopiedDocument();


/* ----------------------------------------------------------------------
   TtaSearchTypedElement

   Returns the first element of a given type. Searching can be done in
   a tree or starting from a given element towards the beginning or the
   end of the abstract tree.

   Parameters:
   searchedType: type of element to be searched. If searchedType.ElSSchema
   is NULL, searchedType must be a basic type ; then the next basic
   element of that type will be returned, whatever its structure
   schema.
   scope: SearchForward, SearchBackward or SearchInTree.
   element: the element that is the root of the tree
   (if scope = SearchInTree) or the starting element
   (if scope = SearchForward or SearchBackward).

   Return value:
   the element found, or NULL if no element has been found.

   ---------------------------------------------------------------------- */
 public static native long TtaSearchTypedElement(long searchedType, int scope, long element);


/* ----------------------------------------------------------------------
   TtaSearchElementByLabel

   Searches the element that has a given label. The search is done in
   a given tree.

   Parameters:
   searchedLabel: label of element to be searched.
   element: the element that is the root of the tree in which the search
   is done.

   Return value:
   the element found, or NULL if no element has been found.

   ---------------------------------------------------------------------- */
 public static native long TtaSearchElementByLabel(String searchedLabel, long element);


/* ----------------------------------------------------------------------
   TtaSearchEmptyElement

   Searches the next empty element. An empty element is either a compound
   element without child or a leaf without content.
   Searching can be done in a tree or starting from a given element towards
   the beginning or the end of the abstract tree.

   Parameters:
   scope: SearchForward, SearchBackward or SearchInTree.
   element: the element that is the root of the tree
   (if scope = SearchInTree) or the starting element
   (if scope = SearchForward or SearchBackward).

   Return values:
   the element found, or NULL if not found.

   ---------------------------------------------------------------------- */
 public static native long TtaSearchEmptyElement(int scope, long element);


/* ----------------------------------------------------------------------
   TtaSearchOtherPairedElement

   Returns the element that is part of the same pair as a given element.

   Parameter:
   element: the element whose paired element is searched.

   Return value:
   the paired element.

   ---------------------------------------------------------------------- */
 public static native long TtaSearchOtherPairedElement(long element);


/* ----------------------------------------------------------------------
   TtaSearchNoPageBreak

   Returns the first sibling element that is not a page break.

   Parameter:
   element: the element.
   forward: TRUE for skipping the next page breaks, FALSE for skipping
   the previous ones.

   Return value:
   the first sibling element, or NULL if there are
   only page breaks.

   ---------------------------------------------------------------------- */
 public static native long TtaSearchNoPageBreak(long element, boolean forward);


/* ----------------------------------------------------------------------
   TtaAskFirstCreation

   Asks interactive creation for "UserSpecified" elements
   ---------------------------------------------------------------------- */
 public static native void TtaAskFirstCreation();
}
