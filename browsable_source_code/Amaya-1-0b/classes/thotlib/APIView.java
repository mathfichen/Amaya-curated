/*
 * DO NOT EDIT
 * Generated by the following command from /users/veillard/opera/javalib directory
 * ../LINUX-ELF/bin/javastub -T JavaTypes.def -M thotlib_APIView -J ../classes/thotlib/APIView.java ../thotlib/include/view.h 
 */
package thotlib;


/*
 * Java public native definitions for class thotlib_APIView
 */

public class APIView {
 public static final int DisplayImmediately = 0;
 public static final int DeferredDisplay = 1;
 public static final int NoComputedDisplay = 2;



/*----------------------------------------------------------------------
   TtaOpenMainView

   Opens the main view of a document. This document must have a PSchema
   (see TtaSetPSchema).

   Parameters:
   document: the document for which a window must be open.
   x, y: coordinate (in millimeters) of the upper left corner of the
   window that will display the view.
   w, h: width and height (in millimeters) of the upper left corner of the
   window that will display the view.

   Return value:
   the view opened or 0 if the view cannot be opened.

  ----------------------------------------------------------------------*/
 public static native int TtaOpenMainView(int document, int x, int y, int w, int h);


/*----------------------------------------------------------------------
   TtaGetViewGeometry returns the position (x, y) and sizes        
   (width, height) of the frame wher view is displayed.    
   Parameters:    document: the document.                  
   name: the name of the view in P schema.  
  ----------------------------------------------------------------------*/
 public static native void TtaGetViewGeometry(int document, String name, /*OUT*/ IntPtr x, /*OUT*/ IntPtr y, /*OUT*/ IntPtr width, /*OUT*/ IntPtr height);


/*----------------------------------------------------------------------
   TtaOpenView

   Opens a view for a document. This document must have a PSchema
   (see TtaSetPSchema).

   Parameters:
   document: the document.
   viewName: name of the view to be opened.
   x, y: coordinate (in millimeters) of the upper left corner of the
   window that will display the view.
   w, h: width and height (in millimeters) of the upper left corner of the
   window that will display the view.

   Return value:
   the view opened or 0 if the view cannot be opened.

  ----------------------------------------------------------------------*/
 public static native int TtaOpenView(int document, String viewName, int x, int y, int w, int h);


/*----------------------------------------------------------------------
   TtaOpenSubView

   Opens a view that shows only a subtree. This document must have a PSchema
   (see TtaSetPSchema).

   Parameters:
   document: the document.
   viewName: name of the view to be opened.
   x, y: coordinate (in millimeters) of the upper left corner of the
   window that will display the view.
   w, h: width and height (in millimeters) of the upper left corner of the
   window that will display the view.
   subtree: root element of the subtree to be shown in the view.

   Return value:
   the view opened or 0 if the view cannot be opened.

  ----------------------------------------------------------------------*/
 public static native int TtaOpenSubView(int document, String viewName, int x, int y, int w, int h, long subtree);


/*----------------------------------------------------------------------
   TtaChangeViewTitle

   Changes the title of a view.

   Parameters:
   document: the document.
   view: the view.
   title: the new title.

  ----------------------------------------------------------------------*/
 public static native void TtaChangeViewTitle(int document, int view, String title);


/*----------------------------------------------------------------------
   TtaCloseView

   Closes a view.

   Parameters:
   document: the document for which a view must be closed.
   view: the view to be closed.

  ----------------------------------------------------------------------*/
 public static native void TtaCloseView(int document, int view);


/*----------------------------------------------------------------------
   TtaFreeView

   frees the view of the document. The window continues to exist but the document
   is no longer displayed in this window.

   Parameters:
   document: the document for which a view must be closed.
   view: the view to be closed.

  ----------------------------------------------------------------------*/
 public static native void TtaFreeView(int document, int view);


/*----------------------------------------------------------------------
   TtaSetSensibility

   Changes the current sensibility used to display a given view of a
   given document.

   Parameters:
   document: the document. Cannot be 0.
   view: the view.
   value: new value of the sensibility.

  ----------------------------------------------------------------------*/
 public static native void TtaSetSensibility(int document, int view, int value);


/*----------------------------------------------------------------------
   TtaSetZoom

   Changes the current zoom used to display a given
   view of a given document.

   Parameters:
   document: the document. Cannot be 0.
   view: the view.
   value: new value of the zoom.

  ----------------------------------------------------------------------*/
 public static native void TtaSetZoom(int document, int view, int value);


/*----------------------------------------------------------------------
   TtaShowElement

   Shows a given element in a given view of a given document.

   Parameters:
   document: the document to which the element to be shown belongs.
   Cannot be 0.
   view: the view where the element must be shown.
   element: the element to be shown.
   position: position of the top of the element in the window.
   Supposing that the y axis is oriented from the top
   of the window (coordinate 0) to the bottom (coordinate 100,
   whatever the actual height of the window), position is the
   desired y coordinate of the top of the element.

  ----------------------------------------------------------------------*/
 public static native void TtaShowElement(int document, int view, long element, int position);


/*----------------------------------------------------------------------
   TtaGetSensibility

   Reads the current sensibility used to display
   a given view of a given document.

   Parameters:
   document: the document. Cannot be 0.
   view: the view.

   Return value:
   current value of the sensibility.

  ----------------------------------------------------------------------*/
 public static native int TtaGetSensibility(int document, int view);


/*----------------------------------------------------------------------
   TtaGetZoom

   Reads the current zoom used to display a given view
   of a given document.

   Parameters:
   document: the document. Cannot be 0.
   view: the view.

   Return value:
   current value of the zoom.

  ----------------------------------------------------------------------*/
 public static native int TtaGetZoom(int document, int view);


/*----------------------------------------------------------------------
   TtaIsPSchemaValid

   Checks if a presentation schema can be applied to a document of a given
   class. No document is needed and the schemas are not loaded by this
   function.

   Parameters:
   structureName: Name of the document class.
   presentationName: Name of the presentation schema to be checked.

   Return value:
   1 if the presentation schema can be applied, 0 if it can not.

  ----------------------------------------------------------------------*/
 public static native int TtaIsPSchemaValid(String structureName, String presentationName);


/*----------------------------------------------------------------------
   TtaGiveViewsToOpen

   Returns the names of the views that can be opened for a document.

   Parameters:
   document: the document.
   buffer: a buffer that will contain the result.

   Return parameters:
   buffer: list of view names. Each name is a character string with
   a final '\0'. Names of views that are already open have a '*'
   at the       end.
   nbViews: number of names in the list, 0 if not any view can be open.

  ----------------------------------------------------------------------*/
 public static native void TtaGiveViewsToOpen(int document, /*OUT*/ StringBuffer buffer, /*OUT*/ IntPtr nbViews);


/*----------------------------------------------------------------------
   TtaGetViewName

   Returns the name of an open view.

   Parameters:
   document: the document to which the view belongs.
   view: the view.

   Return value:
   Name of the view. The buffer must be provided by the caller.

  ----------------------------------------------------------------------*/
 public static native String TtaGetViewName(int document, int view);


/*----------------------------------------------------------------------
   TtaIsViewOpened

   Returns TRUE for a open view.

   Parameters:
   document: the document to which the view belongs.
   view: the view.

   Return value:
   TRUE or FALSE.

  ----------------------------------------------------------------------*/
 public static native boolean TtaIsViewOpened(int document, int view);


/*----------------------------------------------------------------------
   TtaGetViewFromName

   Returns the identifier of a view of a given document from its name.

   Parameters:
   document: the document to which the view belongs.
   viewName: the name of the view.

   Return value:
   the view. 0 if no view of that name is currently open for the document.

  ----------------------------------------------------------------------*/
 public static native int TtaGetViewFromName(int document, String viewName);


/*----------------------------------------------------------------------
   Map and raise the corresponding window.                          
  ----------------------------------------------------------------------*/
 public static native void TtaRaiseView(int document, int view);


/*----------------------------------------------------------------------
   TtaSetDisplayMode

   Changes display mode for a document. Three display modes are available.
   In the immediate mode, each modification made in the abstract tree of a
   document is immediately reflected in all opened views where the modification
   can be seen.
   In the deferred mode, the programmer can decide when the modifications are
   made visible to the user; this avoids the image of the document to blink when
   several elementary changes are made successively. Modifications are displayed
   when mode is changed to DisplayImmediately.
   In the NoComputedDisplay mode, the modifications are not displayed  and they 
   not computed inside the editor; the execution is more rapid but the current image is 
   lost. When mode is changed to DisplayImmediately or DeferredMode, the image 
   is completely redrawn by the editor.
   An application that handles several documents at the same time can choose
   different modes for different documents. When a document is open or created,
   it is initially in the immediate mode.

   Parameters:
   document: the document.
   NewDisplayMode: new display mode for that document.

  ----------------------------------------------------------------------*/
 public static native void TtaSetDisplayMode(int document, int newDisplayMode);


/*----------------------------------------------------------------------
   TtaGetDisplayMode

   Returns the current display mode for a document.

   Parameter:
   document: the document.

   Return value:
   current display mode for that document.

  ----------------------------------------------------------------------*/
 public static native int TtaGetDisplayMode(int document);


/*----------------------------------------------------------------------
   TtaResetViewBackgroundColor : reset the background color for a view        
  ----------------------------------------------------------------------*/
 public static native void TtaResetViewBackgroundColor(int doc, int view);


/*----------------------------------------------------------------------
   TtaSetViewBackgroundColor : set the background color for a view 
  ----------------------------------------------------------------------*/
 public static native void TtaSetViewBackgroundColor(int doc, int view, int color);


/*----------------------------------------------------------------------
   TtaGetViewBackgroundColor : returns the background color for a view        
  ----------------------------------------------------------------------*/
 public static native int TtaGetViewBackgroundColor(int doc, int view);


/*----------------------------------------------------------------------
   TtaClearViewSelections unselects and clears all current displayed
   selections.                                  
  ----------------------------------------------------------------------*/
 public static native void TtaClearViewSelections();
}
