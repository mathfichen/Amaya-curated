/*
 * DO NOT EDIT
 * Generated by the following command from /users/veillard/opera/javalib directory
 * ../LINUX-ELF/bin/javastub -T JavaTypes.def -M thotlib_APIPresentation -J ../classes/thotlib/APIPresentation.java ../thotlib/include/presentation.h 
 */
package thotlib;


/*
 * Java public native definitions for class thotlib_APIPresentation
 */

public class APIPresentation {
 public static final int PRVisibility = 0;
 public static final int PRFunction = 1;
 public static final int PRVertRef = 2;
 public static final int PRHorizRef = 3;
 public static final int PRHeight = 4;
 public static final int PRWidth = 5;
 public static final int PRVertPos = 6;
 public static final int PRHorizPos = 7;
 public static final int PRSize = 8;
 public static final int PRStyle = 9;
 public static final int PRFont = 10;
 public static final int PRUnderline = 11;
 public static final int PRThickness = 12;
 public static final int PRIndent = 13;
 public static final int PRLineSpacing = 14;
 public static final int PRDepth = 15;
 public static final int PRAdjust = 16;
 public static final int PRJustify = 17;
 public static final int PRLineStyle = 18;
 public static final int PRLineWeight = 19;
 public static final int PRFillPattern = 20;
 public static final int PRBackground = 21;
 public static final int PRForeground = 22;
 public static final int PRHyphenate = 23;
 public static final int PRNoBreak1 = 24;
 public static final int PRNoBreak2 = 25;
 public static final int PRShowBox = 26;
 public static final int StyleRoman = 1;
 public static final int StyleBold = 2;
 public static final int StyleItalics = 3;
 public static final int StyleOblique = 4;
 public static final int StyleBoldItalics = 5;
 public static final int StyleBoldOblique = 6;
 public static final int FontTimes = 1;
 public static final int FontHelvetica = 2;
 public static final int FontCourier = 3;
 public static final int NoUnderline = 1;
 public static final int Underline = 2;
 public static final int Overline = 3;
 public static final int CrossOut = 4;
 public static final int ThinUnderline = 1;
 public static final int ThickUnderline = 2;
 public static final int AdjustLeft = 1;
 public static final int AdjustRight = 2;
 public static final int Centered = 3;
 public static final int LeftWithDots = 4;
 public static final int Justified = 1;
 public static final int NotJustified = 2;
 public static final int SolidLine = 1;
 public static final int DashedLine = 2;
 public static final int DottedLine = 3;
 public static final int Hyphenation = 1;
 public static final int NoHyphenation = 2;



/*----------------------------------------------------------------------
   TtaNewPRule

   Creates a new presentation rule of a given type for a given view of a given
   document.

   Parameter:
   presentationType: type of the presentation rule to be created. Available
   values are PRSize, PRStyle, PRFont, PRUnderline, PRThickness, PRIndent,
   PRLineSpacing, PRDepth, PRAdjust, PRJustify, PRLineStyle, PRLineWeight,
   PRFillPattern, PRBackground, PRForeground, PRHyphenate.
   view: the view (this view must be open).
   document: the document.

   Return value:
   new presentation rule.

  ----------------------------------------------------------------------*/
 public static native long TtaNewPRule(int presentationType, int view, int document);


/*----------------------------------------------------------------------
   TtaNewPRuleForView

   Creates a new presentation rule of a given type for a given view of a given
   document. The view is identified by its number.

   Parameter:
   presentationType: type of the presentation rule to be created. Available
   values are PRSize, PRStyle, PRFont, PRUnderline, PRThickness, PRIndent,
   PRLineSpacing, PRDepth, PRAdjust, PRJustify, PRLineStyle, PRLineWeight,
   PRFillPattern, PRBackground, PRForeground, PRHyphenate.
   viewName: the name of the view (this view does not need to be open).
   document: the document.

   Return value:
   new presentation rule.

  ----------------------------------------------------------------------*/
 public static native long TtaNewPRuleForNamedView(int presentationType, String viewName, int document);


/*----------------------------------------------------------------------
   TtaNewPRuleForNamedView

   Creates a new presentation rule of a given type for a given view of a given
   document. The view is identified by its name.

   Parameter:
   presentationType: type of the presentation rule to be created. Available
   values are PRSize, PRStyle, PRFont, PRUnderline, PRThickness, PRIndent,
   PRLineSpacing, PRDepth, PRAdjust, PRJustify, PRLineStyle, PRLineWeight,
   PRFillPattern, PRBackground, PRForeground, PRHyphenate.
   viewName: the name of the view (this view does not need to be open).
   document: the document.

   Return value:
   new presentation rule.

  ----------------------------------------------------------------------*/
 public static native long TtaCopyPRule(long pRule);


/*----------------------------------------------------------------------
   TtaAttachPRule

   Attaches a presentation rule to an element.

   Parameters:
   element: the element to which the presentation rule
   has to be attached.
   pRule: the presentation rule to be attached.
   document: the document to which the element belongs.

  ----------------------------------------------------------------------*/
 public static native void TtaAttachPRule(long element, long pRule, int document);


/*----------------------------------------------------------------------
   TtaRemovePRule

   Removes a presentation rule from an element and release that rule.

   Parameters:
   element: the element with which the presentation rule is associated.
   pRule: the presentation rule to be removed.
   document: the document to which the element belongs.

  ----------------------------------------------------------------------*/
 public static native void TtaRemovePRule(long element, long pRule, int document);


/*----------------------------------------------------------------------
   TtaSetPRuleValue

   Changes the value of a presentation rule. The presentation rule must
   be attached to an element that is part of a document.

   Parameters:
   element: the element to which the presentation rule is attached.
   pRule: the presentation rule to be changed.
   value: the value to be set.
   document: the document to which the element belongs.

   Valid values according to rule type:
   RSize: an integer between 6 and 72 (body size in points).
   PtStyle: StyleRoman, StyleBold, StyleItalics, StyleOblique,
   StyleBoldItalics, StyleBoldOblique.
   RFont: FontTimes, FontHelvetica, FontCourier.
   RUnderline: NoUnderline, Underline, Overline, CrossOut.
   RThickness: ThinUnderline, ThickUnderline.
   PtIndent: a positive, null or negative integer (indentation in points).
   RLineSpacing: a positive integer (line spacing in points).
   RDepth: a positive integer (depth of the element).
   RAdjust: AdjustLeft, AdjustRight, Centered, LeftWithDots.
   RJustify: Justified, NotJustified.
   RHyphenate: Hyphenation, NoHyphenation.
   RLineStyle: SolidLine, DashedLine, DottedLine.
   RLineWeight: a positive or null integer (stroke width for graphics).
   RFillPattern: rank of the pattern in the file thot.pattern.
   RBackground: rank of the background color in the file thot.color.
   RForeground: rank of the foreground color in the file thot.color.

  ----------------------------------------------------------------------*/
 public static native void TtaSetPRuleValue(long element, long pRule, int value, int document);


/*----------------------------------------------------------------------
   TtaSetPRuleView

   Sets the view to which a presentation rule applies. The presentation rule
   must not be attached yet to an element.

   Parameters:
   pRule: the presentation rule to be changed.
   view: the value to be set.

  ----------------------------------------------------------------------*/
 public static native void TtaSetPRuleView(long pRule, int view);


/*----------------------------------------------------------------------
   TtaChangeBoxSize

   Changes the height and width of the box corresponding to an element in
   a given view.

   Parameters:
   element: the element of interest.
   document: the document to which the element belongs.
   view: the view.
   deltaX: width increment in points (positive, negative or zero).
   deltaY: height increment in points (positive, negative or zero).
   unit: the unit used for the values.

  ----------------------------------------------------------------------*/
 public static native void TtaChangeBoxSize(long element, int document, int view, int deltaX, int deltaY, int unit);


/*----------------------------------------------------------------------
   TtaChangeBoxPosition

   Moves the box of an element in a given view.

   Parameters:
   element: the element of interest.
   document: the document to which the element belongs.
   view: the view.
   deltaX: horizontal shift in points (positive, negative or zero).
   deltaY: vertical shift in points (positive, negative or zero).
   unit: the unit used for the values.

  ----------------------------------------------------------------------*/
 public static native void TtaChangeBoxPosition(long element, int document, int view, int X, int Y, int unit);


/*----------------------------------------------------------------------
   TtaGetBoxMaxSize

   Returns the maximum width of the box corresponding to an element in
   a given view. This function is useful for block of lines elements.
   It gives the width of the element in case of lines are not wrapped.

   Parameters:
   element: the element of interest.
   view: the view.
   unit: the unit used for the values.

   Return parameters:
   width: box width in points.

  ----------------------------------------------------------------------*/
 public static native int TtaGetBoxMaxSize(long element, int document, int view, int unit);


/*----------------------------------------------------------------------
   TtaGiveBoxSize

   Returns the height and width of the box corresponding to an element in
   a given view.

   Parameters:
   element: the element of interest.
   view: the view.
   unit: the unit used for the values.

   Return parameters:
   width: box width in points.
   height: box height in points.

  ----------------------------------------------------------------------*/
 public static native void TtaGiveBoxSize(long element, int document, int view, int unit, /*OUT*/ IntPtr width, /*OUT*/ IntPtr height);


/*----------------------------------------------------------------------
   TtaGiveBoxPosition

   Returns the x and y coordinates of the box corresponding to an element in
   a given view. The returned coordinates indicate the distance in points
   between the upper left corner of the box and the upper left corner of its
   parent box.

   Parameters:
   element: the element of interest.
   view: the view.
   unit: the unit used for the values.

   Return parameters:
   xCoord: distance from the left edge of the parent box to the left
   edge of the box, in points.
   yCoord:  distance from the upper edge of the parent box to the upper
   edge of the box, in points.

  ----------------------------------------------------------------------*/
 public static native void TtaGiveBoxPosition(long element, int document, int view, int unit, /*OUT*/ IntPtr xCoord, /*OUT*/ IntPtr yCoord);


/*----------------------------------------------------------------------
   TtaNextPRule

   Returns the first presentation rule associated with a given
   element (if pRule is NULL) or the presentation rule that
   follows a given rule of a given element.

   Parameters:
   element: the element of interest.
   pRule: a presentation rule of that element, or NULL
   if the first rule is asked.

   Return parameter:
   pRule: the next presentation rule, or NULL if
   pRule is the last rule of the element.

  ----------------------------------------------------------------------*/
 public static native void TtaNextPRule(long element, /*INOUT*/ PRule pRule);


/*----------------------------------------------------------------------
   TtaGetPRuleType

   Returns the type of a presentation rule.

   Parameters:
   pRule: the presentation rule of interest.

   Return value:
   type of that presentation rule. Available values are RSize, PtStyle,
   RFont, RUnderline, RThickness, PtIndent, RLineSpacing, RDepth, RAdjust,
   RJustify, RLineStyle, RLineWeight, RFillPattern, RBackground,
   RForeground, RHyphenate.

  ----------------------------------------------------------------------*/
 public static native long TtaGetPRule(long element, int presentationType);


/*----------------------------------------------------------------------
   TtaGetPRuleType

   Returns the type of a presentation rule.

   Parameters:
   pRule: the presentation rule of interest.

   Return value:
   type of that presentation rule. Available values are RSize, PtStyle,
   RFont, RUnderline, RThickness, PtIndent, RLineSpacing, RDepth, RAdjust,
   RJustify, RLineStyle, RLineWeight, RFillPattern, RBackground,
   RForeground, RHyphenate.

  ----------------------------------------------------------------------*/
 public static native int TtaGetPRuleType(long pRule);


/*----------------------------------------------------------------------
   TtaSamePRules

   Compares two presentation rules associated with the same element or with
   different elements.

   Parameters:
   pRule1: first presentation rule to be compared.
   pRule2: second presentation rule to be compared.

   Return value:
   0 if both rules are different, 1 if they are identical.

  ----------------------------------------------------------------------*/
 public static native int TtaGetPRuleValue(long pRule);


/*----------------------------------------------------------------------
   TtaGetPRuleView

   Returns the number of the view to which a presentation rule applies.

   Parameters:
       pRule: the presentation rule of interest.

   Return value:
       number of the view to which the presentation rule applies.

  ----------------------------------------------------------------------*/
 public static native int TtaGetPRuleView(long pRule);


/*----------------------------------------------------------------------
   TtaSamePRules

   Compares two presentation rules associated with the same element or with
   different elements.

   Parameters:
   pRule1: first presentation rule to be compared.
   pRule2: second presentation rule to be compared.

   Return value:
   0 if both rules are different, 1 if they are identical.

  ----------------------------------------------------------------------*/
 public static native int TtaSamePRules(long pRule1, long pRule2);
}
