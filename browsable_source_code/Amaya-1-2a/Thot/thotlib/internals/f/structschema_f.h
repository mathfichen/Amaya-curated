/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 */

#ifndef __CEXTRACT__
#ifdef __STDC__

extern void CreateDocument ( PtrDocument * pDoc );
extern void GetSRuleFromName ( int *typeNum,
                               PtrSSchema * pSS,
                               Name typeName,
                               int whichName );
extern void GetAttrRuleFromName ( int *attrNum,
                                  PtrSSchema *pSSch,
                                  PtrElement pElem,
                                  Name attrName,
                                  int whichName );
extern int GetTypeNumIdentity ( int typeNum,
                                PtrSSchema pSS );
extern boolean SameSRules ( int typeNum1,
                            PtrSSchema pSS1,
                            int typeNum2,
                            PtrSSchema pSS2 );
extern boolean EquivalentSRules ( int typeNum1,
                                  PtrSSchema pSS1,
                                  int typeNum2,
                                  PtrSSchema pSS2,
                                  PtrElement pEl );
extern int ListRuleOfElem ( int typeNum,
                            PtrSSchema pSS );
extern int AggregateRuleOfElem ( int typeNum,
                                 PtrSSchema pSS );
extern boolean ExcludedType ( PtrElement pEl,
                              int typeNum,
                              PtrSSchema pSS );
extern boolean AllowedIncludedElem ( PtrDocument pDoc,
                                     PtrElement pEl,
                                     int typeNum,
                                     PtrSSchema pSS );
extern void ListOrAggregateRule ( PtrDocument pDoc,
                                  PtrElement pEl,
                                  int *typeNum,
                                  PtrSSchema * pSS );
extern RConstruct GetElementConstruct ( PtrElement pEl );
extern PtrElement AncestorList ( PtrElement pEl );
extern boolean CanChangeNumberOfElem ( PtrElement pEl,
                                       int delta );
extern void SRuleForSibling ( PtrDocument pDoc,
                              PtrElement pEl,
                              boolean before,
                              int distance,
                              int *typeNum,
                              PtrSSchema * pSS,
                              boolean * list,
                              boolean * optional );
extern void ReferredType ( PtrElement pRefEl,
                           PtrAttribute pRefAttr,
                           PtrSSchema * pSS,
                           int *typeNum );
extern boolean CanCutElement ( PtrElement pEl,
                               PtrDocument pDoc,
                               PtrElement pElCut );
extern boolean AllowedSibling ( PtrElement pEl,
                                PtrDocument pDoc,
                                int typeNum,
                                PtrSSchema pSS,
                                boolean before,
                                boolean user,
                                boolean inTree );
extern boolean AllowedFirstComponent ( int aggrTypeNum,
                                       PtrSSchema pAggrSS,
                                       int compTypeNum,
                                       PtrSSchema pCompSS );
extern boolean AllowedFirstChild ( PtrElement pEl,
                                   PtrDocument pDoc,
                                   int typeNum,
                                   PtrSSchema pSS,
                                   boolean user,
                                   boolean inTree );
extern void InsertChildFirst ( PtrElement pEl,
                               PtrElement pChild,
                               PtrElement * pFeuille );
extern PtrElement CreateDescendant ( int typeNum,
                                     PtrSSchema pSS,
                                     PtrDocument pDoc,
                                     PtrElement * pLeaf,
                                     int assocNum,
                                     int descTypeNum,
                                     PtrSSchema pDescSS );
extern SSchema TtaGetSchemaExtension ( Document document,
                                       char *NomExtension );
extern SRule *ExtensionRule ( PtrSSchema pSS,
                              int typeNum,
                              PtrSSchema pExtSS );
extern boolean ValidExtension ( PtrElement pEl,
                                PtrSSchema * pExt );
extern PtrAttribute GetAttributeOfElement ( PtrElement pEl,
                                            PtrAttribute pAttr );
extern PtrAttribute AttributeValue ( PtrElement pEl,
                                     PtrAttribute pAttr );
extern boolean CanAssociateAttr ( PtrElement pEl,
                                  PtrAttribute pAttr,
                                  PtrAttribute pNewAttr,
                                  boolean * mandatory );
extern boolean CanSplitElement ( PtrElement firstEl,
                                 int firstChar,
                                 boolean lineBlock,
                                 PtrElement * pList,
                                 PtrElement * pEl,
                                 PtrElement * pSplitEl );

#else /* __STDC__ */

extern void CreateDocument (/* PtrDocument * pDoc */);
extern void GetSRuleFromName (/* int *typeNum,
                                 PtrSSchema * pSS,
                                 Name typeName,
                                 int whichName */);
extern void GetAttrRuleFromName (/* int *attrNum,
                                    PtrSSchema *pSSch,
                                    PtrElement pElem,
                                    Name attrName,
                                    int whichName */);
extern int GetTypeNumIdentity (/* int typeNum,
                                  PtrSSchema pSS */);
extern boolean SameSRules (/* int typeNum1,
                              PtrSSchema pSS1,
                              int typeNum2,
                              PtrSSchema pSS2 */);
extern boolean EquivalentSRules (/* int typeNum1,
                                    PtrSSchema pSS1,
                                    int typeNum2,
                                    PtrSSchema pSS2,
                                    PtrElement pEl */);
extern int ListRuleOfElem (/* int typeNum,
                              PtrSSchema pSS */);
extern int AggregateRuleOfElem (/* int typeNum,
                                   PtrSSchema pSS */);
extern boolean ExcludedType (/* PtrElement pEl,
                                int typeNum,
                                PtrSSchema pSS */);
extern boolean AllowedIncludedElem (/* PtrDocument pDoc,
                                       PtrElement pEl,
                                       int typeNum,
                                       PtrSSchema pSS */);
extern void ListOrAggregateRule (/* PtrDocument pDoc,
                                    PtrElement pEl,
                                    int *typeNum,
                                    PtrSSchema * pSS */);
extern RConstruct GetElementConstruct (/* PtrElement pEl */);
extern PtrElement AncestorList (/* PtrElement pEl */);
extern boolean CanChangeNumberOfElem (/* PtrElement pEl,
                                         int delta */);
extern void SRuleForSibling (/* PtrDocument pDoc,
                                PtrElement pEl,
                                boolean before,
                                int distance,
                                int *typeNum,
                                PtrSSchema * pSS,
                                boolean * list,
                                boolean * optional */);
extern void ReferredType (/* PtrElement pRefEl,
                             PtrAttribute pRefAttr,
                             PtrSSchema * pSS,
                             int *typeNum */);
extern boolean CanCutElement (/* PtrElement pEl,
                                 PtrDocument pDoc,
                                 PtrElement pElCut */);
extern boolean AllowedSibling (/* PtrElement pEl,
                                  PtrDocument pDoc,
                                  int typeNum,
                                  PtrSSchema pSS,
                                  boolean before,
                                  boolean user,
                                  boolean inTree */);
extern boolean AllowedFirstComponent (/* int aggrTypeNum,
                                         PtrSSchema pAggrSS,
                                         int compTypeNum,
                                         PtrSSchema pCompSS */);
extern boolean AllowedFirstChild (/* PtrElement pEl,
                                     PtrDocument pDoc,
                                     int typeNum,
                                     PtrSSchema pSS,
                                     boolean user,
                                     boolean inTree */);
extern void InsertChildFirst (/* PtrElement pEl,
                                 PtrElement pChild,
                                 PtrElement * pFeuille */);
extern PtrElement CreateDescendant (/* int typeNum,
                                       PtrSSchema pSS,
                                       PtrDocument pDoc,
                                       PtrElement * pLeaf,
                                       int assocNum,
                                       int descTypeNum,
                                       PtrSSchema pDescSS */);
extern SSchema TtaGetSchemaExtension (/* Document document,
                                         char *NomExtension */);
extern SRule *ExtensionRule (/* PtrSSchema pSS,
                                int typeNum,
                                PtrSSchema pExtSS */);
extern boolean ValidExtension (/* PtrElement pEl,
                                  PtrSSchema * pExt */);
extern PtrAttribute GetAttributeOfElement (/* PtrElement pEl,
                                              PtrAttribute pAttr */);
extern PtrAttribute AttributeValue (/* PtrElement pEl,
                                       PtrAttribute pAttr */);
extern boolean CanAssociateAttr (/* PtrElement pEl,
                                    PtrAttribute pAttr,
                                    PtrAttribute pNewAttr,
                                    boolean * mandatory */);
extern boolean CanSplitElement (/* PtrElement firstEl,
                                   int firstChar,
                                   boolean lineBlock,
                                   PtrElement * pList,
                                   PtrElement * pEl,
                                   PtrElement * pSplitEl */);

#endif /* __STDC__ */
#endif /* __CEXTRACT__ */
